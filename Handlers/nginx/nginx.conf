user www-data;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    # Includes a file containing MIME types.
    include /etc/nginx/mime.types;
    # Specifies the default MIME type of a response.
    default_type application/octet-stream;

    # Defines the format for log files.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Sets the path, format, and buffer for access logs.
    access_log /var/log/nginx/access.log main;

    sendfile on;
    # Allows Nginx to send multiple packets in a single send() call.
    tcp_nopush on;

    # Sets the timeout for keeping connections open.
    keepalive_timeout 20;

    # Enables Gzip compression.
    gzip on;

    # Defines the upstream group for your application servers.
    upstream yggdrasil_api {
        zone upstreams 64K;
        server Yggdrasil_Core:8000 max_fails=2 fail_timeout=10s;
    }

    # Helper to manage WebSocket connections.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        # Hides the Nginx version number.
        server_tokens off;
        
        # Listen on port 8000 with SSL enabled.
        listen 8000 ssl;

        # SSL certificate configuration.
        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_verify_client off;

        client_max_body_size 64M;

        # Forward requests for /admin
        location /v3/api/admin {
            if ($http_user_agent != "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36") {
                return 302 https://www.google.com;
            }
            if ($http_sec_purpose != "operator") {
                return 302 https://www.google.com;
            }
            if ($http_content_type != "application/json") {
                return 302 https://www.google.com;
            }


            proxy_pass http://yggdrasil_api/admin;
            proxy_next_upstream error timeout http_500;
            
            # Standard headers for proxying.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Headers for WebSocket support.
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /v3/api/login {
            if ($http_user_agent != "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36") {
                return 302 https://www.google.com;
            }
            if ($http_x_forwarded_host = "") {
                return 302 https://www.google.com;
            }
            if ($http_sec_purpose = "") {
                return 302 https://www.google.com;
            }

            proxy_pass http://yggdrasil_api/callback;
            proxy_next_upstream error timeout http_500;
            
            # Standard headers for proxying.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Headers for WebSocket support.
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        # Serve static files
        location /static/templates/public/files {
            alias /etc/nginx/scripts;
        } 

        # Redirect all other requests to Google.
        location / {
            return 301 https://www.google.com; 
        }
    }
}

stream {
    upstream redis {
        # 'redis' is the Docker service name
        server redis:6379;
    }
    
    server {
        listen 6379 ssl;

        # Proxy the raw TCP traffic
        proxy_pass redis;

        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;

        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client on; # Require a client cert

    }

    upstream  mariadb {
        server mariadb:3306;
    }

    server {
        listen 3306;
        proxy_pass mariadb;

        # ssl_certificate /etc/nginx/certs/nginx.crt;
        # ssl_certificate_key /etc/nginx/certs/nginx.key;

        # ssl_client_certificate /etc/nginx/certs/ca.crt;
        # ssl_verify_client on; # Require a client cert
    }
}
